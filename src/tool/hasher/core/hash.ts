export class Hash {
    private _hash: Buffer;
    /**
     * Gets the raw buffer of the current hash generated.
     */
    public get hash(): Buffer {
        return this._hash;
    }

    private _salt: Buffer;
    /**
     * Gets the raw buffer of the current salt generated.
     */
    public get salt(): Buffer {
        return this._salt;
    }
    
    /**
     * A new instance of hash generated by Argon2 algorithm.
     * @param hash raw hash generated.
     * @param salt raw salt generated.
     */
    public constructor(hash: Buffer, salt: Buffer) {
        this._hash = hash;
        this._salt = salt;
    }

    /**
     * Converts a HEX encoded string (if has compatible) into a new instance of Hash.
     * @param text string encoded in HEX do you want to transform.
     */
    public static fromHexString(text: string): Hash {
        if (typeof text !== 'string') {
            throw new Error(
                'The value given as text given hasn\'t an string value'
            );
        }

        const byte = Buffer.from(text, 'hex');
        if (byte.length < 2) {
            throw new Error(
                'The text given is incomplete'
            );
        }

        const hashLength = byte[0];
        const saltLength = byte[1];
        if (hashLength + saltLength + 2 !== byte.length) {
            throw new Error(
                'The text given has corrupted or incompatible'
            );
        }

        const hash = byte.slice(2, hashLength + 2);
        const salt = byte.slice(2 + hashLength);
        return new Hash(Buffer.from(hash), Buffer.from(salt));
    }

    /**
     * Converts this instance into a HEX encoded string.
     */
    public toHexString(): string {
        const head = Buffer.from([
            this._hash.length,
            this._salt.length,
        ]);

        const body = Buffer.concat([
            head,
            this._hash,
            this._salt
        ]);

        return body.toString('hex');
    }
}